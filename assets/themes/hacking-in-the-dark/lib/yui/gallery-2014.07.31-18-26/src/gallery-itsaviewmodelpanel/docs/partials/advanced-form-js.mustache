YUI(yuiconfig).use('node-base', 'gallery-itsaformmodel', 'gallery-itsaviewmodelpanel',
                   'gallery-itsacheckbox', 'editor', 'transition', function(Y) {
    var panel, user, template, spinnericon, firsterror = true;

    // adding skin sam to body for getting the right skin for the widgets
    Y.one('body').addClass('yui3-skin-sam');

    // create MyFormModelClass
    Y.UserModel = Y.Base.create('usermodel', Y.ITSAFormModel, [], {
        sync: function (action, options, callback) {
            var instance = this;
            switch (action) {
              case 'submit':
                Y.later(300000, null, function() {
                    // normally you need to invest the response on the server, but now we do this here:
                    var loginok = ((instance.get('username')==='marco') &&
                                   (instance.get('password')==='panel'));
                    if (loginok) {
                        callback();
                    }
                    else {
                        callback('Wrong username/password: try again');
                    }
                });
                return;
              default:
                callback('Invalid action');
            }
        }
    }, {
        ATTRS: {
            firstname: {
                formtype: 'text',
                formconfig: {
                    label: 'Firstname',
                    placeholder: 'firstname',
                    required: true,
                    tooltip: 'say something'
                },
                validator: function(v) {
                    return (typeof v==='string') && (v.length>0);
                },
                validationerror: 'Enter a valid name'
            },
            lastname: {
                formtype: 'text',
                formconfig: {
                    label: 'Lastname',
                    placeholder: 'lastname',
                    required: true
                },
                validator: function(v) {
                    return (typeof v==='string') && (v.length>0);
                },
                validationerror: 'Enter a valid name'
            },
            notes: {
                formtype: Y.EditorBase,
                formconfig: {
                    label: 'Notes'
                }
            },
            maried: {
                value: false,
                formtype: Y.ITSACheckbox,
                formconfig: {
                    label: 'Maried'
                }
            },
            firstnamePartner: {
                formtype: 'text',
                formconfig: {
                    label: 'Firstname',
                    placeholder: 'firstname',
                },
                validator: function(v) {
                    return (typeof v==='string') && (v.length>0);
                },
                validationerror: 'Enter a valid name'
            },
            lastnamePartner: {
                formtype: 'text',
                formconfig: {
                    label: 'Lastname',
                    placeholder: 'lastname',
                },
                validator: function(v) {
                    return (typeof v==='string') && (v.length>0);
                },
                validationerror: 'Enter a valid name'
            },
            weddingdate: {
                value: new Date(),
                formtype: 'date',
                formconfig: {
                    label: 'Weddingdate',
                    format: '%Y-%m-%d'
                }
            }
        }
    });

    user = new Y.UserModel();

    // Reflect all changes directly to the model-instance, so we know when 'maried' changes by UI
    // We also could left this false and listen to panel.after('*:uichanged')
    user.setLifeUpdate(true);

    template =
        '<legend>User</legend>'+
            '<fieldset>'+
                '<div class="pure-control-group"><%== data.firstname %></div>'+
                '<div class="pure-control-group"><%== data.lastname %></div>'+
                '<div class="pure-control-group"><%== data.notes %></div>'+
                '<div class="pure-control-group"><%== data.maried %></div>'+
            '</fieldset>'+
        '<div id="partnerdata"<% if (data._maried===false) { %>style="display: none; height: 0;"<% } %>>'+
            '<legend>Partner</legend>'+
                '<fieldset>'+
                    '<div class="pure-control-group"><%== data.firstnamePartner %></div>'+
                    '<div class="pure-control-group"><%== data.lastnamePartner %></div>'+
                    '<div class="pure-control-group"><%== data.weddingdate %></div>'+
                '</fieldset>'+
        '</div>';

    panel = new Y.ITSAViewModelPanel({
        model: user,
        template: template,
        title: 'Userdata',
        centered: true,
        visible: true,
        dragable: true,
        editable: true,
        width: 350
    }).render();

    user.after('mariedChange', function(e) {
        var partnerdata = panel.get('contentBox').one('#partnerdata');
        e.newVal ? partnerdata.show('ease-in', {height: '145px', duration: 0.5}) :
                   partnerdata.hide('ease-out', {height: 0, duration: 0.5});
    });

});