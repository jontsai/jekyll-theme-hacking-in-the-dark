/**
* An implementation of the flyweight pattern for rendering tree-structured data.
*
* This module is made of two components, the manager and the nodes.
* The manager, FlyweightTreeManager, holds a definition of the tree in an internal, private object
* which is completely passive, with no methods, events or attributes.
* This is the internal tree configuration and the nodes of that tree are called iNodes
* for 'internal nodes'.
*
* When any action needs to be taken on any node, the manager takes a node instance
* (an instance of FlyweightTreeNode or, more often, a subclass of it)
* from the pool of instances, or creates one if none is available and slides it
* on top of the iNode holding its state and then performs the action as if
* the node instance had always been there.
*
* The manager is a subclass of Widget and contains the overall container for the tree.
* Nodes are a subclass of Base and they are rendered from markup resulting of
* processing its template with its attributes and several pre-defined placeholders.
*
* Nodes should not be instantiated directly but requested from the manager.
* Nodes are automatically generated by the manager in response to events.
* They are returned to the pool of nodes once the event listener return.
* The user should not hold references to nodes provided to event listeners
* or the callback of the tree traversal methods, since the manager will return
* them to the pool.  If the user needs to keep a reference, the `hold` method
* can be used to preserve it.
* On the other hand, for methods that do return a permanent reference or
* references marked as held, the user is responsible for calling `release`
* when no longer required so that the manager can return them to the pool.
*
* @module gallery-flyweight-tree
*/
'use strict';
/*jslint white: true */
var Lang = Y.Lang,
    YArray = Y.Array,

    DOT = '.',
    HASH = '#',
    BYPASS_PROXY = "_bypassProxy",
    CBX = 'contentBox',
    VALUE = 'value',
    EXPANDED = 'expanded',
    DYNAMIC_LOADER = 'dynamicLoader',
    TABINDEX = 'tabIndex',
    FOCUSED = 'focusedNode',

    DEFAULT_POOL = '_default',

    getCName = Y.ClassNameManager.getClassName,
    FWNODE_NAME = 'flyweight-tree-node',
    cName = function (name) {
        return getCName(FWNODE_NAME, name);
    },

    FWMgr,
    FWNode;

