YUI.add('module-tests-dtpopup', function(Y) {

    var suite = new Y.Test.Suite('gallery-datatable-popup'),
        Assert = Y.Test.Assert;

    // a blocking sleep function ... easier than Y.later or timeout crap
    function sleep(msecs){
        var tstart = new Date().getTime();
        while( new Date().getTime() < tstart + msecs );
        return;
    }


    function makeDT( colChoice ) {

        var someData = [
            {sid:10, sname:'Sneakers', sopen:0, stype:0, stock:0, sprice:59.93, shipst:'s', sdate:new Date(2009,3,11) },
            {sid:11, sname:'Varnished Cane Toads', sopen:1,  stype:10, stock:2, shipst:'u', sprice:17.49, sdate:new Date(2009,4,12) },
            {sid:12, sname:'JuJu Beans', sopen:0,  stype:20, stock:1, sprice:1.29, shipst:'s', sdate:new Date(2009,5,13) },
            {sid:13, sname:'Tent Stakes', sopen:1,  stype:30, stock:1, sprice:7.99, shipst:'n', sdate:new Date(2010,6,14) },
            {sid:14, sname:'Peanut Butter', sopen:0,  stype:40, stock:0, sprice:3.29, shipst:'e', sdate:new Date(2011,7,15) },
            {sid:15, sname:'Garbage Bags', sopen:1, stype:50,  stock:2, sprice:17.95, shipst:'r', sdate:new Date(2012,8,18) }
        ];

        // enlarge the dataset
        Y.Array.each(someData,function(d,di){
            d.sdesc = 'Description for Item ' + d.sid + ' : ' + d.sname;
        });
     //   someData = someData.concat(someData,someData);

        //
        // Define some Arrays / Object Hashes to be used by formatters / editor options ...
        //
        var stypes = [
            {value:0,  text:'Standard'},
            {value:10, text:'Improved'},
            {value:20, text:'Deluxe'},
            {value:30, text:'Better'},
            {value:40, text:'Subpar'},
            {value:50, text:'Junk'}
        ];

        var shipTypes = { s:'Shipped', u:'Unknown', n:'Not Shipped', e:'Expedited', r:'Returned' };

        var stypesObj = {};
        Y.Array.each(stypes,function(r){
            stypesObj[r.value] = r.text;
        });

        var stock = { 0:'No ', 1:'Yes ', 2:'B/O ' };
        var sopen = { 0:'No', 1:'Yes'};

    //
    // We use pre-named editors on the "editor" property of the Columns,
    //   in some cases, editorConfig are added to provide stuff to pass to the editor Instance ...

       var colsNoediting = [
            { key:'sid',    label:"sID", editable:false },
            { key:'sopen',  label:"Open?" },
            { key:'sname',  label:"Item Name" },
            { key:'sdesc',  label:"Description"},
            { key:'stype',  label:"Condition" },
            { key:'stock',  label:"In Stock?" },
            { key:'sprice', label:"Retail Price" },
            { key:'sdate',  label:"Trans Date" }
        ];

        var colsEditing = [
                { key:'sid',    label:"sID", editable:false },

                { key:'sopen',  label:"Open?",
              //    formatter:"custom", formatConfig:sopen,
                  editor:"checkbox", editorConfig:{
                    checkboxHash:{ 'true':1, 'false':0 }
                  }
                },

                { key:'sname',  label:"Item Name"
                  //editor:"text", editorConfig:{ offsetXY: [5,5] }
                },

                { key:'sdesc',  label:"Description",  editor:"textarea" },

                { key:'stype',  label:"Condition",
              //    formatter:"custom", formatConfig:stypesObj,
                  editor:"select",
                  editorConfig:{
                      selectOptions:  stypesObj, //stypes,
                      templateEngine:Y.Handlebars
                  }
                },

                { key:'stock',  label:"In Stock?",
              //    formatter:"custom", formatConfig:stock,
                  editor:"radio",
                  editorConfig:{
                      radioOptions:stock,
                      overlayWidth: 260,
                      templateEngine:Y.Handlebars
                  }
                },

                { key:'sprice', label:"Retail Price"
             //     formatter:"currency2", className:'align-right'
                 // editor:"number"
                 // editor: 'inlineNumber'
                },

                { key:'sdate',  label:"Trans Date",
              //    formatter:"shortDate", className:'align-right',
                  editor:"calendar"
                 // editor:"date", editorConfig:{ keyFiltering:null, inputKeys:false }
                }
            ];

        var cols = [ colsNoediting, colsEditing ];

        var localDT = new Y.DataTable({
            columns: cols[colChoice],
            data: someData

         //   editOpenType: 'click',
         //   defaultEditor: 'text',
         //   editable: true

        }).render('#dtable');
        return localDT;
    }


    suite.add(new Y.Test.Case({
        name: 'Gallery DataTable-Celleditor-Popup : basic setup and instance',

        setUp : function () {
            // cols
            // {sid: sname: sdesc: sopen:0, stype:0, stock:0, sprice:, shipst:'s', sdate: },
            this.dt = makeDT(0);

        },

        tearDown : function () {
            this.dt.destroy();
            delete this.dt;
        },

        'should be a class': function() {
            Assert.isFunction(Y.DataTable.Editable);
        },

        'should instantiate as a Model': function() {
            Assert.isInstanceOf( Y.DataTable, this.dt, 'Not an instanceof Y.DataTable');
        },

        'listeners are set' : function(){
            //Assert.areSame( 3, this.m._subscr.length, "Didn't find 3 listeners" );
        },

        'check ATTR default values' : function(){
            Assert.isFalse( this.dt.get('editable'), "editable default not false" );
            Assert.areSame( 'none', this.dt.get('defaultEditor'), "default editor not 'none'" );
            Assert.areSame( 'dblclick', this.dt.get('editOpenType'), "default editOpenType not 'dblclick'" );
        },

        'check ATTR editable setting' : function(){
            Assert.isFalse( this.dt.get('editable'), "editable not initially false" );

            this.dt.set('editable',true);
            Assert.isTrue( this.dt.get('editable'), "set editable to true" );

            this.dt.set('editable',null);
            Assert.isTrue( this.dt.get('editable'), "set editable to null" );

            this.dt.set('editable','none');
            Assert.isTrue( this.dt.get('editable'), "set editable to 'none'" );

            this.dt.set('editable',false);
            Assert.isFalse( this.dt.get('editable'), "set editable false" );

        },

        'check ATTR editOpenType setting' : function(){
            Assert.isFalse( this.dt.get('editable'), "editable not initially false" );
            Assert.areSame( 'dblclick', this.dt.get('editOpenType'), "default editOpenType not dblclick" );

            this.dt.set('editable',true);
            Assert.isTrue( this.dt.get('editable'), "set editable to true" );

            Assert.areSame( 'dblclick', this.dt.get('editOpenType'), "default editOpenType not dblclick" );

            this.dt.set('editOpenType',null);
            Assert.areSame( 'dblclick', this.dt.get('editOpenType'), "set editOpenType failed on null" );

            this.dt.set('editOpenType',1);
            Assert.areSame( 'dblclick', this.dt.get('editOpenType'), "set editOpenType failed on 1" );

            this.dt.set('editOpenType','click');
            Assert.areSame( 'click', this.dt.get('editOpenType'), "set editOpenType to click failed" );

        },

        'check ATTR defaultEditor setting' : function(){
            Assert.isFalse( this.dt.get('editable'), "editable not initially false" );
            Assert.areSame( 'none', this.dt.get('defaultEditor'), "default defaultEditor not none" );

            this.dt.set('editable',true);
            Assert.isTrue( this.dt.get('editable'), "set editable to true" );

            this.dt.set('defaultEditor',null);
            Assert.isNull( this.dt.get('defaultEditor'), "set defaultEditor not null" );

            this.dt.set('defaultEditor','text');
            Assert.areSame( 'text', this.dt.get('defaultEditor'), "set defaultEditor failed on text" );

            var ce = this.dt.getCellEditors();
            Assert.areSame( 7, ce.length, "setup default editors count not 7" );

            var ed = this.dt._commonEditors.text;
        //    var inl = this.dt._commonEditors[this.dt.get('defaultEditor')];
            Assert.areSame( 'text', ed.get('name'), "common editor 0 should be text");

        }
        
    }));



    suite.add(new Y.Test.Case({
        name: 'Gallery DataTable-Celleditor-Popup : basic setup and instance',

        setUp : function () {
            // cols
            // {sid: sname: sdesc: sopen:0, stype:0, stock:0, sprice:, shipst: sdate: },
            this.dt = makeDT(0);

        },

        tearDown : function () {
            this.dt.destroy();
            delete this.dt;
        },

        'check all "text" except 1' : function(){

            this.dt.set('defaultEditor','text');
            this.dt.set('editable',true);

            Assert.isTrue( this.dt.get('editable'), "set editable to true" );
            Assert.areSame( 'text', this.dt.get('defaultEditor'), "set defaultEditor failed on inline" );

            // {sid: sname: sdesc: sopen:0, stype:0, stock:0, sprice:, shipst: sdate: },

            var ed = this.dt._commonEditors[this.dt.get('defaultEditor')];
            Assert.areSame( 'text', ed.get('name'), "common editor 0 should be text");

            var tr0 = this.dt.getRow(0),
                tds0 = tr0.all('td');

        //
        //  edit Row 0, column 1 - change sopen from 0 to 1
        //
            tds0.item(1).simulate('dblclick');
            var edinp = ed._inputNode;
            edinp.set('value',1);
            edinp.simulate('keypress',{keyCode:13});

            var row0 = this.dt.getRecord(0);
            Assert.areSame( 1, (+row0.get('sopen')), "Record 0 col sopen should be 1");

        }

    }));


    Y.Test.Runner.add(suite);


},'', { requires: [ 'test' ] });

